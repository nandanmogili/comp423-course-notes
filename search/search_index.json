{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Nandan's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a Dev Container for Rust","text":"<ul> <li>Primary author: Nandan Mogili </li> <li>Reviewer: Aaron Patel</li> </ul> <p>Welcome to this step-by-step guide on setting up a basic Rust project from scratch. Whether you\u2019re a complete beginner or looking to structure your environment more efficiently, this tutorial will walk you through every essential step\u2014from creating a Git repository to compiling and running a Hello World example.</p> <ol> <li>Introduction </li> <li>Prerequisites </li> <li>Git Repository Setup </li> <li>Dev Container Setup </li> <li>Verify Rust Version </li> <li>Initialize a Rust Project </li> <li>Add a Hello World Example </li> <li>Compile and Run </li> </ol>"},{"location":"tutorials/rust-setup/#introduction","title":"Introduction","text":"<p>Rust is a modern systems programming language designed for speed, safety, and concurrency. By following this guide, you\u2019ll learn how to:</p> <ul> <li>Set up a Git repo for version control  </li> <li>Configure a development container using Docker and VS Code  </li> <li>Initialize a new Rust project  </li> <li>Add and run a simple Hello World program  </li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following:</p> <ol> <li>Git \u2013 for version control  </li> <li>Visual Studio Code (VS Code) \u2013 a code editor with Dev Container support  </li> <li>Docker \u2013 to run your Dev Container  </li> <li>Rust \u2013 the Rust toolchain, including Cargo  </li> </ol> <p>VS Code Installation Docker Installation Rust Installation</p>"},{"location":"tutorials/rust-setup/#git-repository-setup","title":"Git Repository Setup","text":"<p>Version control is essential for managing changes to your project\u2019s codebase. Let\u2019s start by creating a Git repository:</p> <ol> <li> <p>Create a new directory:</p> <p><code>mkdir rust-project</code></p> <p><code>cd rust-project</code></p> </li> <li> <p>Initialize the repository:</p> <p><code>git init</code></p> </li> <li> <p>Create a <code>.gitignore</code> file:    Exclude files and directories you don\u2019t want under source control:</p> <p><code>echo \"/target\\n**/*.rs.bk\\n.vscode\\n*.code-workspace\\n.DS_Store\" &gt; .gitignore</code></p> </li> <li> <p>Commit the setup:</p> <p><code>git add .</code></p> <p><code>git commit -m \"Initial commit: setup Git repository with .gitignore\"</code></p> </li> </ol>"},{"location":"tutorials/rust-setup/#dev-container-setup","title":"Dev Container Setup","text":"<p>A development container ensures a consistent environment for your project, regardless of the host machine. In VS Code, we can use the Remote - Containers extension to manage this.</p> <ol> <li>Install the Remote - Containers extension:</li> <li>Open VS Code  </li> <li>Go to Extensions (View \u2192 Extensions or Ctrl+Shift+X/Cmd+Shift+X)  </li> <li> <p>Search for \u201cRemote - Containers\u201d and install it  </p> </li> <li> <p>Create a <code>.devcontainer</code> folder:</p> <p><code>mkdir .devcontainer cd .devcontainer</code></p> </li> <li> <p>Add <code>devcontainer.json</code>:    This file tells VS Code how to configure and launch your container. Notice we are using a Microsoft-provided base image.</p> <p><code>{   \"name\": \"Rust Dev Container\",   \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",   \"extensions\": [     \"rust-lang.rust-analyzer\"   ],   \"settings\": {     \"terminal.integrated.shell.linux\": \"/bin/bash\"   } }</code></p> </li> <li> <p>Reopen project in container: </p> </li> <li>Press F1 or Shift Command P in VS Code  </li> <li>Type <code>Remote-Containers: Reopen in Container</code> </li> <li>Wait for the container to build  </li> </ol> <p>Once the container is up and running, you should have a consistent Rust environment inside VS Code.</p>"},{"location":"tutorials/rust-setup/#initialize-a-rust-project","title":"Initialize a Rust Project","text":"<p>Verify your Rust Version</p> <p>After your Dev Container is running\u2014or if you\u2019re on a local machine\u2014verify the Rust toolchain:</p> <pre><code>rustc --version\n</code></pre> <p>Create a new Rust Project</p> <p>With your environment set up, it's time to create a new Rust project. We'll use Cargo, Rust's package manager and build system, to initialize the project without setting up a Git repository automatically.</p> <pre><code>cargo new rust-project --vcs none\n</code></pre> <pre><code>cd rust-project\n</code></pre>"},{"location":"tutorials/rust-setup/#hello-world-example","title":"Hello World Example","text":"<p>Navigate to the src directory:</p> <pre><code>cd src\n</code></pre> <p>Open main.rs in your code editor and replace its contents with the following:</p> <pre><code>fn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre> <p>Compile and Run:</p> <p>Use cargo build and cargo run to compile and run your Rust Project and you should see the expected output : Hello world!</p> <pre><code>cargo build\n</code></pre> <pre><code>cargo run\n</code></pre> <p>Congratulations! You\u2019ve successfully set up a Rust development environment using a Dev Container, initialized a Git repository, created a new Rust project, and run your first Rust program.</p>"}]}